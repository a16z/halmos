#     ___       ___       ___       ___       ___       ___
#    /\__\     /\  \     /\__\     /\__\     /\  \     /\  \
#   /:/__/_   /::\  \   /:/  /    /::L_L_   /::\  \   /::\  \
#  /::\/\__\ /::\:\__\ /:/__/    /:/L:\__\ /:/\:\__\ /\:\:\__\
#  \/\::/  / \/\::/  / \:\  \    \/_/:/  / \:\/:/  / \:\:\/__/
#    /:/  /    /:/  /   \:\__\     /:/  /   \::/  /   \::/  /
#    \/__/     \/__/     \/__/     \/__/     \/__/     \/__/

[global]

# run tests in the given contract
# Shortcut for `--match-contract '^{NAME}$'`.
contract = ""

# run tests in contracts matching the given regex
# Ignored if the --contract name is given.
match-contract = ""

# run tests matching the given prefix
# Shortcut for `--match-test '^{PREFIX}'`.
function = "(check|invariant)_"

# run tests matching the given regex
# The --function prefix is automatically added, unless the regex starts with '^'.
match-test = ""

# specify Panic error codes to be treated as test failures; use '*' to include all error codes
panic-error-codes = "0x01"

# set depth for invariant testing (length of the stateful sequence of calls)
invariant-depth = 2

# set loop unrolling bounds
loop = 2

# set the max number of paths; 0 means unlimited
width = 0

# set the maximum length in steps of a single path; 0 means unlimited
depth = 0

# specify lengths for dynamic-sized arrays, bytes, and string types
# Lengths can be specified as a comma-separated list of integers enclosed in curly braces, or as a single integer.
array-lengths = ""

# set default lengths for dynamic-sized arrays (excluding bytes and string) not specified in --array-lengths
default-array-lengths = "0,1,2"

# set default lengths for bytes and string types not specified in --array-lengths
default-bytes-lengths = "0,65,1024"

# Select one of the available storage layout models
# The generic model should only be necessary for vyper, huff, or unconventional storage patterns in yul.
storage-layout = "solidity"

# allow the usage of FFI to call external functions
ffi = false

# generate coverage report at the given file path (disabled by default)
# coverage-output = COVERAGE_FILE_PATH

################################################################################
#                              Debugging options                               #
################################################################################

# increase verbosity levels: -v, -vv, -vvv, ...
verbose = 0

# print statistics
statistics = false

# disable progress display
no-status = false

# run in debug mode
debug = false

# debug config parsing (show all config values and their sources)
debug-config = false

# profile instruction execution frequencies
profile-instructions = false

# output test results in JSON
# json-output = JSON_FILE_PATH

# include minimal information in the JSON output
minimal-json-output = false

# print every execution step
print-steps = false

# when --print-steps is enabled, also print memory contents
print-mem = false

# print all final execution states
print-states = false

# print successful execution states
print-success-states = false

# print failed execution states
print-failed-states = false

# print blocked execution states
print-blocked-states = false

# print setup execution states
print-setup-states = false

# print full counterexample model
print-full-model = false

# stop after a counterexample is found
early-exit = false

# dump SMT queries for assertion violations
dump-smt-queries = false

# disable Python's automatic garbage collection for cyclic objects
# This does not affect reference counting based garbage collection.
disable-gc = false

# trace memory allocations and deallocations
trace-memory = false

# include specific events in traces
trace-events = "LOG,SSTORE,SLOAD"

################################################################################
#                                Build options                                 #
################################################################################

# forge build artifacts directory name
forge-build-out = "out"

################################################################################
#                                Solver options                                #
################################################################################

# specify the SMT solver to use
# If not specified, defaults to 'yices'
# If --solver-command is used, this is ignored.
solver = "yices"

# interpret constant power up to N
smt-exp-by-const = 2

# set timeout for solving branching conditions; 0 means no timeout
# Can specify a unit, e.g
# '200ms', '5s', '2m', '1h', etc.
solver-timeout-branching = "1ms"

# set timeout for solving assertion violation conditions; 0 means no timeout
# Can specify a unit, e.g
# '200ms', '5s', '2m', '1h', etc.
solver-timeout-assertion = "60s"

# set memory limit (in megabytes) for the solver; 0 means no limit
solver-max-memory = 0

# use the given exact command when invoking the solver (overrides automatic solver detection/download triggered by --solver)
# solver-command = COMMAND

# set the number of threads for parallel solvers
# solver-threads = N

# cache unsat queries using unsat cores
cache-solver = false

################################################################################
#                             Experimental options                             #
################################################################################

# support symbolic jump destination
symbolic-jump = false

# generate a flamegraph of the execution
flamegraph = false
